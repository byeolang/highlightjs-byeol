(()=>{var e=(()=>{hljs.regex;let e=hljs.IDENT_RE,t=`[_\\+]*${e}`,n=/[\t \f]+/,s=["def","as","is","ctor","on","in","next","else","for","if","ret","while","with","pack","break","get","set","end",],i=["print","input",],a=["true","false","nul",],r=["void","err","int","super","byte","flt","str","char","me","it",],o={keyword:s,built_in:i,literal:a,type:r},c={scope:"operator",match:"[+-=%/*^|&|!(){}[\\]]"},l={scope:"string",contains:[hljs.BACKSLASH_ESCAPE],variants:[hljs.APOS_STRING_MODE,hljs.QUOTE_STRING_MODE]},d={scope:"number",relevance:0,variants:[{begin:"[0-9]+"},{begin:"[0-9]+\\.[0-9]+[f]?"},]},p=hljs.HASH_COMMENT_MODE,u={match:["def",n,e,],keywords:o,scope:{1:"keyword",3:"title.class"}},g={match:[e,n,e,],keywords:o,scope:{1:"variables",3:"title.class"}},b={variants:[{begin:/\(\s*\)/,skip:!0,contains:[c]},{begin:/\(/,end:/\)/,keywords:o,contains:[g,l,c,d,]}]},E={begin:[t,/\s*\(/],excludeEnd:!0,scope:{1:"title.function",2:"operator"},contains:[b,c]};return e=>({name:"namu",aliases:["nm"],unicodeRegex:!0,keywords:o,contains:[d,l,p,u,b,E,c,]})})();hljs.registerLanguage("namu",e)})();
